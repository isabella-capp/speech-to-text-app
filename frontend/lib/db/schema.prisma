generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  password      String?
  emailVerified DateTime?
  image         String?

  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[] // Optional for WebAuthn support
  chats         Chat[]
  transcriptions Transcription[]
  metrics       UserMetrics?    // Optional for user metrics aggregation

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Chat {
  id        String   @id @default(cuid())
  title     String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id        String      @id @default(cuid())
  content   String
  audioName String?
  audioSize Int?
  audioPath String?
  modelName String?
  type      MessageType @default(TRANSCRIPTION)
  chatId    String
  chat      Chat        @relation(fields: [chatId], references: [id], onDelete: Cascade)
  
  metrics   TranscriptionMetrics?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum MessageType {
  USER
  ASSISTANT
  TRANSCRIPTION
}

model Transcription {
  id         String   @id @default(cuid())
  transcript String
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model TranscriptionMetrics {
  id                    String   @id @default(cuid())
  messageId             String   @unique
  message               Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  
  // Ground truth and evaluation data
  groundTruthText       String   // The correct transcription provided by user
  
  // Metrics scores (0-1 range)
  wordErrorRate         Float?   // WER score
  characterErrorRate    Float?   // CER score  
  bleuScore            Float?   // BLEU score
  semanticSimilarity   Float?   // Semantic similarity score
  
  // Processing metrics
  processingTimeMs     Int?     // Time taken for transcription
  audioLengthMs        Int?     // Length of audio file
  
  // Additional metadata
  evaluatedAt          DateTime @default(now())
  evaluationModel      String?  // Model used for evaluation
  
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

model UserMetrics {
  id                   String   @id @default(cuid())
  userId               String   @unique
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Aggregated metrics
  totalTranscriptions  Int      @default(0)
  averageWER          Float?
  averageCER          Float?
  averageBLEU         Float?
  averageSemanticSim  Float?
  
  // Model usage statistics
  whisperUsage        Int      @default(0)
  wav2vec2Usage       Int      @default(0)
  
  // Performance metrics
  totalProcessingTime Int      @default(0)
  totalAudioLength    Int      @default(0)
  
  lastUpdated         DateTime @updatedAt
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}
