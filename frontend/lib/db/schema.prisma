generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  password      String?
  emailVerified DateTime?
  image         String?

  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[] // Optional for WebAuthn support
  chats         Chat[]
  transcriptions Transcription[]
  evaluations    Evaluation[]

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Chat {
  id        String   @id @default(cuid())
  title     String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id        String      @id @default(cuid())
  content   String
  audioName String?
  audioSize Int?
  audioPath String?
  modelName String?
  type      MessageType @default(TRANSCRIPTION)
  chatId    String
  chat      Chat        @relation(fields: [chatId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum MessageType {
  USER
  ASSISTANT
  TRANSCRIPTION
}

model Transcription {
  id         String   @id @default(cuid())
  transcript String
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Evaluation {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  audioName       String?
  audioPath       String
  audioDurationMs Int?

  winner String // "Whisper" o "Wav2Vec2"
  winnerScore Float // Score calcolato come (1-WER)/Tempo
  improvement Int? // Miglioramento relativo in WER tra i due modelli (nullable)

  groundTruthText String   // trascrizione corretta fornita dallâ€™utente

  models          ModelResult[] // 1-N: risultati dei modelli su questo audio

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model ModelResult {
  id                 String       @id @default(cuid())
  evaluationId       String
  evaluation         Evaluation   @relation(fields: [evaluationId], references: [id], onDelete: Cascade)

  modelName          String       // es. "Whisper", "Wav2Vec2"
  transcription      String
  wordErrorRate      Float?
  characterErrorRate Float?
  accuracy           Float?
  literalSimilarity  Float?
  processingTimeMs   Float?      // Cambiato da Int? a Float? per mantenere i decimali

  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}
